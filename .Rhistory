round(importance(trainRF),2)
varUsed(trainRF)
is.na(str_extract(rawTrainData$name, "Mr"))
library(plyr)
is.na(str_extract(rawTrainData$name, "Mr"))
library(foreign)
is.na(str_extract(rawTrainData$name, "Mr"))
??str_extract
library(string)
library(stringr)
is.na(str_extract(rawTrainData$name, "Mr"))
sum(is.na(str_extract(rawTrainData$name, "Mr")))
sum(is.na(str_extract(rawTrainData$name, "Mrs")))
sum(is.na(str_extract(rawTrainData$name, "Mr ")))
sum(is.na(str_extract(rawTrainData$name, "Mrs ")))
sum(is.na(str_extract(rawTrainData$name, "Mr")))
rawTrainData$name[is.na(str_extract(rawTrainData$name, "Mr")),]
rawTrainData$name[is.na(str_extract(rawTrainData$name, "Mr"))]
rawTrainData$name[is.na(str_extract(rawTrainData$name, "Mr"))]
grep(rawTrainData$name, "Mr")
grep("Mr", rawTrainData$name)
rawTrainData$name[grep("Mr", rawTrainData$name)]
rawTrainData$name[is.na(str_extract(rawTrainData$name, "Mr."))]
sum(is.na(str_extract(rawTrainData$name, "Mr.")))
sum(is.na(str_extract(rawTrainData$name, "Mrs.")))
sum(!is.na(str_extract(rawTrainData$name, "Mrs.")))
sum(!is.na(str_extract(rawTrainData$name, "Mr.")))
sum(!is.na(str_extract(rawTrainData$name, "Miss.")))
129+67+182
129+647+182
sum(!is.na(str_extract(rawTrainData$name, "Miss.")) )
sum(!is.na(str_extract(rawTrainData$name, " Miss. ")))
sum(!is.na(str_extract(rawTrainData$name, "Miss.")) )
sum(!is.na(str_extract(rawTrainData$name, " Mr. ")))
sum(!is.na(str_extract(rawTrainData$name, " Mrs. ")))
517+125+182
sum(!is.na(str_extract(rawTrainData$name, " Rev. ")))
sum(!is.na(str_extract(rawTrainData$name, " Master. ")))
824+46
sum(!is.na(str_extract(rawTrainData$name, " Countess. ")))
sum(!is.na(str_extract(rawTrainData$name, " Countess. ")))
grep("Countess", rawTrainData$name)
rawTrainData$name[760]
rawTrainData[grep("Countess", rawTrainData$name)]
rawTrainData$name[grep("Countess", rawTrainData$name)]
rawTrainData$name[grep("Jonkheer", rawTrainData$name)]
rawTrainData$name[grep(" Ms. ", rawTrainData$name)]
rawTrainData$name[grep(" Capt. ", rawTrainData$name)]
rawTrainData$name[grep(" Captain ", rawTrainData$name)]
rawTrainData$sexByName <- 0#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Mr. "))] <- "Mr"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Mrs. "))] <- "Mrs"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Mme. "))] <- "Mrs"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Miss. "))] <- "Miss"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Ms. "))] <- "Miss"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Mlle. "))] <- "Miss"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Capt. "))] <- "Mr"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Major. "))] <- "Mr"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Col. "))] <- "Mr"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Master. "))] <- "Mast"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Rev. "))] <- "Mr"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Dr. "))] <- "Mr"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Don. "))] <- "Mr"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Countess. "))] <- "Mrs"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Jonkheer. "))] <- "Mr"
rawTrainData$sexByName==0
!rawTrainData$sexByName==0
sum(rawTrainData$sexByName==0)
rawTrainData$name[sum(rawTrainData$sexByName==0)]
rawTrainData$name[sum(rawTrainData$sexByName==0),]
rawTrainData$name[rawTrainData$sexByName==0]
rawTrainData$sexByName <- 0#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Mr. "))] <- "Mr"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Mrs. "))] <- "Mrs"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Mme. "))] <- "Mrs"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Miss. "))] <- "Miss"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Ms. "))] <- "Miss"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Mlle. "))] <- "Miss"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Capt. "))] <- "Mr"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Major. "))] <- "Mr"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Col. "))] <- "Mr"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Master. "))] <- "Mast"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Rev. "))] <- "Mr"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Dr. "))] <- "Mr"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Don. "))] <- "Mr"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Countess. "))] <- "Mrs"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Jonkheer. "))] <- "Mr"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Lady. "))] <- "Mrs"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Sir. "))] <- "Mr"#
rawTestData$sexByName <- 0#
rawTestData$sexByName[!is.na(str_extract(rawTestData$ame, " Mr. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Mrs. "))] <- "Mrs"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Mme. "))] <- "Mrs"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Miss. "))] <- "Miss"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Ms. "))] <- "Miss"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Mlle. "))] <- "Miss"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Capt. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Major. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Col. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Master. "))] <- "Mast"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Rev. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Dr. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Don. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Countess. "))] <- "Mrs"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Jonkheer. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Lady. "))] <- "Mrs"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Sir. "))] <- "Mr"
rawTrainData$name[rawTrainData$sexByName==0]
rawTestData$name[rawTestData$sexByName==0]
rawTestData$sexByName <- 0#
rawTestData$sexByName[!is.na(str_extract(rawTestData$ame, " Mr. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Mrs. "))] <- "Mrs"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Mme. "))] <- "Mrs"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Miss. "))] <- "Miss"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Ms. "))] <- "Miss"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Mlle. "))] <- "Miss"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Capt. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Major. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Col. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Master. "))] <- "Mast"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Rev. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Dr. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Don. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Countess. "))] <- "Mrs"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Jonkheer. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Lady. "))] <- "Mrs"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Sir. "))] <- "Mr"
rawTestData$name[rawTestData$sexByName==0]
rawTestData$sexByName <- 0#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Mr. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Mrs. "))] <- "Mrs"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Mme. "))] <- "Mrs"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Miss. "))] <- "Miss"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Ms. "))] <- "Miss"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Mlle. "))] <- "Miss"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Capt. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Major. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Col. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Master. "))] <- "Mast"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Rev. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Dr. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Don. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Countess. "))] <- "Mrs"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Jonkheer. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Lady. "))] <- "Mrs"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Sir. "))] <- "Mr"
rawTestData$name[rawTestData$sexByName==0]
rawTestData$sexByName==0
rawTestData$sexByName[rawTestData$sexByName==0]
rawTestData$sexByName <- 0#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Mr. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Mrs. "))] <- "Mrs"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Mme. "))] <- "Mrs"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Miss. "))] <- "Miss"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Ms. "))] <- "Miss"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Mlle. "))] <- "Miss"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Capt. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Major. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Col. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Master. "))] <- "Mast"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Rev. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Dr. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Don. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Countess. "))] <- "Mrs"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Jonkheer. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Lady. "))] <- "Mrs"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Sir. "))] <- "Mr"#
#
rawTestData$sexByName[rawTestData$sexByName==0] <- "Mr"
rawTestData$sexByName[rawTestData$sexByName==0]
reads and creates a new set of data where categorical variables are factorized and #
# missing values are imputed#
# The URL https://github.com/mattdelhey/kaggle-titanic is perfect for learning, some of #
# the code is taken from there, check it for mor info.#
rm(list=ls())#
library(plyr)#
library(foreign)#
library(stringr)#
#setwd("/Users/rahimdelaviz/Coursera/IntroDataScience/courseMaterial/kaggle/titanic")#
setwd("/Domain/tudelft.net/Users/rdelavizaghbolagh/Coursera/DataScience/kaggle/titanic")#
inputTrainFile = "./data/train.csv"#
rawTrainData = read.csv("./data/train.csv", stringsAsFactor = F)#
#
rawTrainData$Survival <- NULL#
#colnames(rawTrainData)  <- paste("survived")#
#
rawTestData = read.csv("./data/test.csv", stringsAsFactor = F)#
#
# Create a survived variable in the test data set#
# Set "0" (did not survive) as the default value#
survived <- 0#
rawTestData <- data.frame("survived"=survived, rawTestData)#
#
# Convert catagorical variables to factors#
rawTrainData$survived <- factor(rawTrainData$survived)#
rawTrainData$sex <- factor(rawTrainData$sex)#
rawTrainData$pclass <- factor(rawTrainData$pclass)#
rawTrainData$embarked <- factor(rawTrainData$embarked)#
#
rawTestData$survived <- factor(rawTestData$survived)#
rawTestData$sex <- factor(rawTestData$sex)#
rawTestData$pclass <- factor(rawTestData$pclass)#
rawTestData$embarked <- factor(rawTestData$embarked)#
#impute missing values #
#first let see how many are missing#
unlist(lapply(lapply(rawTrainData , is.na), sum))#
unlist(lapply(lapply(rawTestData , is.na), sum))#
#age has the highest number of missing values.#
# Combine the data sets for age/fare modeling#
full <- join(rawTestData, rawTrainData, type = "full")#
#
#builds linear models#
age.mod <- lm(age ~ pclass + sex + sibsp + parch + fare, data = full)#
fare.mod <- lm(fare ~ pclass + sex + sibsp + parch + age , data = full)#
rawTrainData$age[is.na(rawTrainData$age)] <- 2+predict(age.mod, rawTrainData)[is.na(rawTrainData$age)]#
rawTestData$age[is.na(rawTestData$age)] <- 2+predict(age.mod, rawTestData)[is.na(rawTestData$age)]#
#
rawTrainData$fare[is.na(rawTrainData$fare)] <- predict(fare.mod, rawTrainData)[is.na(rawTrainData$fare)]#
rawTestData$fare[is.na(rawTestData$fare)] <- predict(fare.mod, rawTestData)[is.na(rawTestData$fare)]#
#
rawTrainData$catFare[rawTrainData$fare<10] <- "1"#
rawTrainData$catFare[rawTrainData$fare<20] <- "2"#
rawTrainData$catFare[rawTrainData$fare<30] <- "3"#
rawTrainData$catFare[rawTrainData$fare>=30] <- "4"#
rawTrainData$catFare <- factor(rawTrainData$catFare)#
#
rawTestData$catFare[rawTestData$fare<10] <- "1"#
rawTestData$catFare[rawTestData$fare<20] <- "2"#
rawTestData$catFare[rawTestData$fare<30] <- "3"#
rawTestData$catFare[rawTestData$fare>=30] <- "4"#
rawTestData$catFare <- factor(rawTestData$catFare)#
#
#age #
rawTrainData$catAge[rawTrainData$age<5] <- "1"#
rawTrainData$catAge[rawTrainData$age<10] <- "2"#
rawTrainData$catAge[rawTrainData$age<15] <- "3"#
rawTrainData$catAge[rawTrainData$age<22] <- "4"#
rawTrainData$catAge[rawTrainData$age<32] <- "5"#
rawTrainData$catAge[rawTrainData$age<50] <- "6"#
rawTrainData$catAge[rawTrainData$age>=50] <- "7"#
rawTrainData$catAge <- factor(rawTrainData$catAge)#
rawTestData$catAge[rawTestData$age<5] <- "1"#
rawTestData$catAge[rawTestData$age<10] <- "2"#
rawTestData$catAge[rawTestData$age<15] <- "3"#
rawTestData$catAge[rawTestData$age<22] <- "4"#
rawTestData$catAge[rawTestData$age<32] <- "5"#
rawTestData$catAge[rawTestData$age<50] <- "6"#
rawTestData$catAge[rawTestData$age>=50] <- "7"#
rawTestData$catAge <- factor(rawTestData$catAge)#
#
rawTrainData$numFamily <- rawTrainData$sibsp + rawTrainData$parch#
rawTestData$numFamily <- rawTestData$sibsp + rawTestData$parch#
#
# Replace missing values in embarked with most popular#
rawTrainData$embarked[rawTrainData$embarked == ""] <- "S"#
rawTrainData$embarked <- factor(rawTrainData$embarked)#
#
rawTrainData$survived[is.na(rawTrainData$survived)] <- 1#
rawTrainData$survived <- factor(rawTrainData$survived)#
#determine sex and society class by name #
#
rawTrainData$sexByName <- 0#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Mr. "))] <- "Mr"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Mrs. "))] <- "Mrs"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Mme. "))] <- "Mrs"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Miss. "))] <- "Miss"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Ms. "))] <- "Miss"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Mlle. "))] <- "Miss"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Capt. "))] <- "Mr"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Major. "))] <- "Mr"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Col. "))] <- "Mr"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Master. "))] <- "Mast"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Rev. "))] <- "Mr"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Dr. "))] <- "Mr"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Don. "))] <- "Mr"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Countess. "))] <- "Mrs"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Jonkheer. "))] <- "Mr"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Lady. "))] <- "Mrs"#
rawTrainData$sexByName[!is.na(str_extract(rawTrainData$name, " Sir. "))] <- "Mr"#
rawTrainData$sexByName <- factor(rawTrainData$sexByName)#
rawTestData$sexByName <- 0#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Mr. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Mrs. "))] <- "Mrs"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Mme. "))] <- "Mrs"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Miss. "))] <- "Miss"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Ms. "))] <- "Miss"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Mlle. "))] <- "Miss"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Capt. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Major. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Col. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Master. "))] <- "Mast"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Rev. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Dr. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Don. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Countess. "))] <- "Mrs"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Jonkheer. "))] <- "Mr"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Lady. "))] <- "Mrs"#
rawTestData$sexByName[!is.na(str_extract(rawTestData$name, " Sir. "))] <- "Mr"#
#This is only one missing from the test dataset which is not clear he/she "Oliva y Ocana, Dona. Fermina"#
rawTestData$sexByName[rawTestData$sexByName==0] <- "Mr"#
rawTestData$sexByName <- factor(rawTestData$sexByName)#
rawTestData$write.csv(rawTrainData, "./data/train_clean_new_sex.csv", row.names=F)#
write.csv(rawTestData, "./data/test_clean_new_sex.csv", row.names=F)#
#
save("rawTrainData", file="./data/train_clean_new_sex.RData")#
save("rawTestData", file="./data/test_clean_new_sex.RData")
rawTestData$write.csv(rawTrainData, "./data/train_clean_new_sex.csv", row.names=F)
setwd("/Users/rahimdelaviz/Coursera/IntroDataScience/courseMaterial/kaggle/titanic")#
#trainDataClean = read.csv("./data/train_clean.csv")#
#testDataClean  = read.csv("./data/test_clean.csv")#
#
load("./data/train_clean_new_sex.RData")#
load("./data/test_clean_new_sex.RData")
trainRF <- randomForest(survived ~ sexByName+age+pclass+fare+numFamily, ntree=500,  importance=T,  data= rawTrainData)
trainRF
importance(trainRF)
predTest <- predict(trainRF, rawTestData  , type="response")#
rawTestData$survived <- predTest#
write.csv(rawTestData, file="./data/NaiveRFModelSexByName.csv", row.names=F)
names(rawTrainData)
randomForest(survived ~ sexByName+age+pclass+fare+numFamily, ntree=500,  importance=T,  data= rawTrainData)
randomForest(survived ~ sexByName+age+pclass+fare+numFamily, ntree=1000,  importance=T,  data= rawTrainData)
randomForest(survived ~ sexByName+age+pclass+fare+numFamily, ntree=200,  importance=T,  data= rawTrainData)
round(importance(trainRF),2
round(importance(trainRF),2)
trainRF <- randomForest(survived ~ sexByName+age+pclass+fare+numFamily, ntree=200,  importance=T,  data= rawTrainData)
kaggele competition #
#Rahim delaviz #
#https://github.com/mattdelhey/kaggle-titanic#
#setwd("/Domain/tudelft.net/Users/rdelavizaghbolagh/Coursera/DataScience/kaggle/titanic")#
setwd("/Users/rahimdelaviz/Coursera/IntroDataScience/courseMaterial/kaggle/titanic")#
#trainDataClean = read.csv("./data/train_clean.csv")#
#testDataClean  = read.csv("./data/test_clean.csv")#
#
load("./data/train_clean_new_sex.RData")#
load("./data/test_clean_new_sex.RData")#
#
#unlist(lapply(lapply(trainDataClean , is.na), sum))#
#
library(randomForest)#
#+pclass+fare+sibsp+embarked+parch#
trainRF <- randomForest(survived ~ sexByName+age+pclass+fare+numFamily, ntree=200,  importance=T,  data= rawTrainData)#
#
#testData$embarked[testData$embarked==""] <- "C"#
#
round(importance(trainRF),2)#
#
predTest <- predict(trainRF, rawTestData  , type="response")#
rawTestData$survived <- predTest#
write.csv(rawTestData, file="./data/NaiveRFModelSexByName.csv", row.names=F)
trainRF
randomForest(survived ~ sexByName+age+pclass+fare+numFamily, ntree=200,  importance=T,  data= rawTrainData)
trainRF <- randomForest(survived ~ sexByName+age+pclass+fare+numFamily, ntree=2000,  importance=T,  data= rawTrainData)
trainRF
round(importance(trainRF),2)#
#
predTest <- predict(trainRF, rawTestData  , type="response")#
rawTestData$survived <- predTest#
write.csv(rawTestData, file="./data/NaiveRFModelSexByName.csv", row.names=F)
names(rawTrainData)
randomForest(survived ~ sexByName+age+pclass+fare+numFamily+catFare, ntree=2000,  importance=T,  data= rawTrainData)
randomForest(survived ~ sexByName+age+pclass+fare+numFamily+catFare, ntree=2000,  importance=T,  data= rawTrainData)
randomForest(survived ~ sexByName+age+pclass+fare+numFamily+catFare, ntree=500,  importance=T,  data= rawTrainData)
randomForest(survived ~ sexByName+age+pclass+fare+numFamily+catFare, ntree=500,  importance=T,  data= rawTrainData)
randomForest(survived ~ sexByName+age+pclass+fare+numFamily+catFare, ntree=500,  importance=T,  data= rawTrainData)
randomForest(survived ~ sexByName+age+pclass+fare+numFamily+catFare, ntree=500,  importance=T,  data= rawTrainData)
randomForest(survived ~ sexByName+age+pclass+fare+numFamily+catFare, ntree=500,  importance=T,  data= rawTrainData)
randomForest(survived ~ sexByName+age+pclass+fare+numFamily+catFare, ntree=500,  importance=T,  data= rawTrainData)
randomForest(survived ~ sexByName+catAge+pclass+fare+numFamily+catFare, ntree=2000,  importance=T,  data= rawTrainData)
randomForest(survived ~ sexByName+catAge+pclass+fare+numFamily+catFare, ntree=500,  importance=T,  data= rawTrainData)
randomForest(survived ~ sexByName+catAge+pclass+fare+numFamily+catFare, ntree=500,  importance=T,  data= rawTrainData)
randomForest(survived ~ sexByName+age+pclass+fare+numFamily+catFare, ntree=500,  importance=T,  data= rawTrainData)
randomForest(survived ~ sexByName+age+pclass+fare+numFamily+catFare, ntree=500,  importance=T,  data= rawTrainData)
randomForest(survived ~ sex+age+pclass+fare+numFamily+catFare, ntree=500,  importance=T,  data= rawTrainData)
randomForest(survived ~ sex+age+pclass+fare+numFamily+catFare, ntree=500,  importance=T,  data= rawTrainData)
randomForest(survived ~ sex+age+pclass+fare+numFamily+catFare, ntree=500,  importance=T,  data= rawTrainData)
randomForest(survived ~ sexByName+age+pclass+fare+numFamily+catFare, ntree=500,  importance=T,  data= rawTrainData)
randomForest(survived ~ sexByName+age+pclass+fare+numFamily+catFare, ntree=500,  importance=T,  data= rawTrainData)
randomForest(survived ~ sexByName+age+pclass+fare+numFamily+fare, ntree=500,  importance=T,  data= rawTrainData)
randomForest(survived ~ sexByName+age+pclass+fare+numFamily+fare, ntree=500,  importance=T,  data= rawTrainData)
trainRF <- randomForest(survived ~ sexByName+catAge+pclass+fare+numFamily+fare, ntree=500,  importance=T,  data= rawTrainData)
trainRF
trainRF
randomForest(survived ~ sexByName+age+pclass+fare+numFamily+fare, ntree=500,  importance=T,  data= rawTrainData)
randomForest(survived ~ sexByName+age+pclass+fare+numFamily+fare, ntree=500,  importance=T,  data= rawTrainData)
trainRF <- randomForest(survived ~ sexByName+age+pclass+fare+numFamily+fare, ntree=500,  importance=T,  data= rawTrainData)
trainRF
trainRF <- randomForest(survived ~ sexByName+age+pclass+fare+numFamily+fare, ntree=500,  importance=T,  data= rawTrainData)#
summary(trainRF)
trainRF <- randomForest(survived ~ sexByName+age+pclass+fare+numFamily+fare, ntree=500,  importance=T, mtry= 2,  data= rawTrainData)#
summary(trainRF)
trainRF <- randomForest(survived ~ sexByName+age+pclass+fare+numFamily+fare, ntree=500,  importance=T, mtry= 2,  data= rawTrainData)#
summary(trainRF)#
trainRF
trainRF <- randomForest(survived ~ sexByName+age+pclass+fare+numFamily+fare, ntree=500,  importance=T, mtry= 2,  data= rawTrainData)#
summary(trainRF)#
trainRF
trainRF <- randomForest(survived ~ sexByName+age+pclass+fare+numFamily+fare, ntree=500,  importance=T, mtry= 3,  data= rawTrainData)#
summary(trainRF)#
trainRF
trainRF <- randomForest(survived ~ sexByName+age+pclass+fare+numFamily+fare, ntree=500,  importance=T, mtry= 1,  data= rawTrainData)#
summary(trainRF)#
trainRF
trainRF <- randomForest(survived ~ sexByName+age+pclass+fare+numFamily+fare, ntree=500,  importance=T,  data= rawTrainData)#
summary(trainRF)#
trainRF
trainRF <- randomForest(survived ~ sex+age+pclass+fare+numFamily+fare, ntree=500,  importance=T,  data= rawTrainData)#
summary(trainRF)#
trainRF
trainRF <- randomForest(survived ~ sex+age+pclass+fare+numFamily+fare, ntree=500,  importance=T,  data= rawTrainData)#
summary(trainRF)#
trainRF
trainRF <- randomForest(survived ~ sexByName+age+pclass+numFamily+fare, ntree=500,  importance=T,  data= rawTrainData)#
summary(trainRF)#
trainRF
trainRF <- randomForest(survived ~ sexByName+age+pclass+numFamily+fare+embarked, ntree=500,  importance=T,  data= rawTrainData)#
summary(trainRF)#
trainRF
trainRF <- randomForest(survived ~ sexByName+age+pclass+numFamily+fare, ntree=500,  importance=T,  data= rawTrainData)#
summary(trainRF)#
trainRF
(46+97)/891
trainRF <- randomForest(survived ~ sexByName+age+pclass+numFamily+fare, ntree=500,  importance=T,  data= rawTrainData)#
summary(trainRF)#
trainRF
trainRF <- randomForest(survived ~ sexByName+age+pclass+numFamily+fare, ntree=500,  importance=T,  data= rawTrainData)#
summary(trainRF)#
trainRF
round(importance(trainRF),2)#
#
predTest <- predict(trainRF, rawTestData  , type="response")#
rawTestData$survived <- predTest#
write.csv(rawTestData, file="./data/NaiveRFModelSexByName.csv", row.names=F)
library(help =kknn)
library(kknn)#
data(iris)#
m <- dim(iris)[1]
m
val <- sample(1:m, size = round(m/3), replace = FALSE,#
prob = rep(1/m, m))
va
val
iris.learn <- iris[-val,]#
iris.valid <- iris[val,]
?kknn
iris.kknn <- kknn(Species~., iris.learn, iris.valid, distance = 1,#
kernel = "triangular")
summary(iris.kknn)
fit <- fitted(iris.kknn)
fit
table(iris.valid$Species, fit)
pcol <- as.character(as.numeric(iris.valid$Species))
pairs(iris.valid[1:4], pch = pcol, col = c("green3", "red")#
[(iris.valid$Species != fit)+1])
rm(list=ls())#
setwd("/Users/rahimdelaviz/Coursera/IntroDataScience/courseMaterial/kaggle/titanic")#
#trainDataClean = read.csv("./data/train_clean.csv")#
#testDataClean  = read.csv("./data/test_clean.csv")#
#
load("./data/train_clean_new_sex.RData")#
load("./data/test_clean_new_sex.RData")#
#
library(kknn)
m <- dim(rawTrainData)[1]#
val <- sample(1:m, size = round(m/3), replace = FALSE, prob = rep(1/m, m))
val
m <- dim(rawTrainData)[1]#
val <- sample(1:m, size = round(m/3), replace = FALSE, prob = rep(1/m, m))#
#
rawTrainData.learn <- iris[-val,]#
rawTrainData.valid <- iris[val,]#
rawTrainData.kknn <- kknn(survived ~ sexByName+age+pclass+numFamily+fare, rawTrainData.learn, rawTrainData.valid , distance = 1, kernel = "triangular")
rawTrainData.learn <- iris[-val,]#
rawTrainData.valid <- iris[val,]
names(rawTrainData.learn)
m <- dim(rawTrainData)[1]#
val <- sample(1:m, size = round(m/3), replace = FALSE, prob = rep(1/m, m))#
#
rawTrainData.learn <- rawTrainData[-val,]#
rawTrainData.valid <- rawTrainData[val,]#
rawTrainData.kknn <- kknn(survived ~ sexByName+age+pclass+numFamily+fare, rawTrainData.learn, rawTrainData.valid , distance = 1, kernel = "triangular")
summary(rawTrainData.kknn)
fit <- fitted(rawTrainData.kknn)
fit
fit <- fitted(rawTrainData.kknn)#
table(rawTrainData.valid$survived, fit)
rawTrainData.kknn <- kknn(survived ~ sexByName+age+pclass+numFamily+fare, rawTrainData.learn, rawTrainData.valid , distance = 1)#
#
fit <- fitted(rawTrainData.kknn)#
table(rawTrainData.valid$survived, fit)
rawTrainData.kknn <- kknn(survived ~ sexByName+age+pclass+numFamily+fare, rawTrainData.learn, rawTrainData.valid , distance = 2)#
#
fit <- fitted(rawTrainData.kknn)#
table(rawTrainData.valid$survived, fit)
rawTrainData.kknn <- kknn(survived ~ sexByName+age+pclass+numFamily+fare, rawTrainData.learn, rawTrainData.valid , distance = 1, k=20)#
#
fit <- fitted(rawTrainData.kknn)#
table(rawTrainData.valid$survived, fit)
rawTrainData.kknn <- kknn(survived ~ sexByName+age+pclass+numFamily+fare, rawTrainData.learn, rawTrainData.valid , distance = 1, k=20)#
#
fit <- fitted(rawTrainData.kknn)#
table(rawTrainData.valid$survived, fit)
rawTrainData.kknn <- kknn(survived ~ sexByName+age+pclass+numFamily+fare, rawTrainData.learn, rawTrainData.valid , distance = 1, k=15)#
#
fit <- fitted(rawTrainData.kknn)#
table(rawTrainData.valid$survived, fit)
simulation(survived ~ sexByName+age+pclass+numFamily+fare, rawTrainData.learn, runs = 15, k=10)
simulation(survived ~ sexByName+age+pclass+numFamily+fare, rawTrainData.learn, runs = 15, k=20)
simulation(survived ~ sexByName+age+pclass+numFamily+fare, rawTrainData.learn, runs = 15, k=5)
simulation(survived ~ sexByName+age+pclass+numFamily+fare, rawTrainData.learn, runs = 50, k=25)
simulation(survived ~ sexByName+age+pclass+numFamily+fare, rawTrainData.learn, runs = 50, k=10)
simulation(survived ~ sexByName+age+pclass+numFamily+fare, rawTrainData.learn, runs = 50, k=4)
simulation(survived ~ sexByName+age+pclass+numFamily+fare, rawTrainData.learn, runs = 20, k=15)
simulation(survived ~ sexByName+age+pclass+numFamily+fare, rawTrainData.learn, runs = 20, k=15)#
simulation(survived ~ sexByName+age+pclass+numFamily, rawTrainData.learn, runs = 20, k=15)#
simulation(survived ~ sexByName+age+pclass, rawTrainData.learn, runs = 20, k=15)
simulation(survived ~ sexByName+age+numFamily, rawTrainData.learn, runs = 20, k=15)
simulation(survived ~ sexByName+age+numFamily, rawTrainData.learn, runs = 20, k=15)
simulation(survived ~ sexByName+numFamily, rawTrainData.learn, runs = 20, k=15)
simulation(survived ~ age+numFamily, rawTrainData.learn, runs = 20, k=15)
simulation(survived ~ sexByName+age+numFamily+fare, rawTrainData.learn, runs = 20, k=15)
rawTrainData.kknn <- kknn(survived ~ sexByName+age+numFamily, rawTrainData.learn, rawTrainData.valid , distance = 1, k=15)
fit <- fitted(rawTrainData.kknn)#
table(rawTrainData.valid$survived, fit)
rawTrainData.kknn <- kknn(survived ~ sexByName+age+numFamily, rawTrainData.learn, rawTrainData.valid , distance = 1, k=15, kernel = c("triangular", "rectangular", "epanechnikov", "optimal"))
rawTrainData.kknn <- kknn(survived ~ sexByName+age+numFamily, rawTrainData.learn, rawTrainData.valid , distance = 1, k=15, kernel = "rectangular")#
#
fit <- fitted(rawTrainData.kknn)#
table(rawTrainData.valid$survived, fit)
simulation(survived ~ sexByName+age+numFamily, rawTrainData.learn, runs = 20, k=15, kernel = "rectangular")
simulation(survived ~ sexByName+age+numFamily, rawTrainData.learn, runs = 20, k=15, kernel = "epanechnikov")
simulation(survived ~ sexByName+age+numFamily, rawTrainData.learn, runs = 20, k=15, kernel = "optimal")
simulation(survived ~ sexByName+age+numFamily, rawTrainData.learn, runs = 20, k=15, kernel = "rectangular")
simulation(survived ~ sexByName+age+numFamily, rawTrainData.learn, runs = 20, k=10, kernel = "rectangular")
simulation(survived ~ sexByName+age+numFamily, rawTrainData.learn, runs = 20, k=25, kernel = "rectangular")
simulation(survived ~ sexByName+age+numFamily, rawTrainData.learn, runs = 20, k=7, kernel = "rectangular")
simulation(survived ~ sexByName+age+numFamily, rawTrainData.learn, runs = 20, k=10, kernel = "rectangular")
simulation(survived ~ sexByName+age+numFamily, rawTrainData.learn, runs = 20, k=15, kernel = "rectangular")
rawTrainData.kknn <- kknn(survived ~ sexByName+age+numFamily, rawTrainData.learn, rawTrainData.valid , distance = 2, k=15, kernel = "rectangular")#
#
fit <- fitted(rawTrainData.kknn)#
table(rawTrainData.valid$survived, fit)
simulation(survived ~ sexByName+age+numFamily, rawTrainData.learn, runs = 20, k=15, kernel = "rectangular", distance=2)
summary(rawTrainData.kknn)
predict(rawTrainData.kknn, rawTestData)
kaggele competition #
#Rahim delaviz #
#look at https://github.com/mattdelhey/kaggle-titanic#
#setwd("/Domain/tudelft.net/Users/rdelavizaghbolagh/Coursera/DataScience/kaggle/titanic")#
#
rm(list=ls())#
setwd("/Users/rahimdelaviz/Coursera/IntroDataScience/courseMaterial/kaggle/titanic")#
#trainDataClean = read.csv("./data/train_clean.csv")#
#testDataClean  = read.csv("./data/test_clean.csv")#
#
load("./data/train_clean_new_sex.RData")#
load("./data/test_clean_new_sex.RData")#
#
library(kknn)#
# data(iris)#
# m <- dim(iris)[1]#
# val <- sample(1:m, size = round(m/3), replace = FALSE,#
# prob = rep(1/m, m))#
# iris.learn <- iris[-val,]#
# iris.valid <- iris[val,]#
# iris.kknn <- kknn(Species~., iris.learn, iris.valid, distance = 1,#
# kernel = "triangular")#
# summary(iris.kknn)#
# fit <- fitted(iris.kknn)#
# table(iris.valid$Species, fit)#
# pcol <- as.character(as.numeric(iris.valid$Species))#
# pairs(iris.valid[1:4], pch = pcol, col = c("green3", "red")#
# [(iris.valid$Species != fit)+1])#
# data(ionosphere)#
# ionosphere.learn <- ionosphere[1:200,]#
# ionosphere.valid <- ionosphere[-c(1:200),]#
# fit.kknn <- kknn(class ~ ., ionosphere.learn, ionosphere.valid)#
# table(ionosphere.valid$class, fit.kknn$fit)#
# (fit.train1 <- train.kknn(class ~ ., ionosphere.learn, kmax = 15,#
# kernel = c("triangular", "rectangular", "epanechnikov", "optimal"), distance = 1))#
# table(predict(fit.train1, ionosphere.valid), ionosphere.valid$class)#
# (fit.train2 <- train.kknn(class ~ ., ionosphere.learn, kmax = 15,#
# kernel = c("triangular", "rectangular", "epanechnikov", "optimal"), distance = 2))#
# table(predict(fit.train2, ionosphere.valid), ionosphere.valid$class)#
m <- dim(rawTrainData)[1]#
val <- sample(1:m, size = round(m/3), replace = FALSE, prob = rep(1/m, m))#
#
rawTrainData.learn <- rawTrainData[-val,]#
rawTrainData.valid <- rawTrainData[val,]#
#rawTrainData.kknn <- kknn(survived ~ sexByName+age+pclass+numFamily+fare, rawTrainData.learn, rawTrainData.valid , distance = 1, kernel = "triangular")#
rawTrainData.kknn <- kknn(survived ~ sexByName+age+numFamily, rawTrainData.learn, rawTrainData.valid , distance = 1, k=15, kernel = "rectangular")#
#
predict(rawTrainData.kknn, rawTestData)#
#fit <- fitted(rawTrainData.kknn)#
#table(rawTrainData.valid$survived, fit)#
#
#simulation(survived ~ sexByName+age+pclass+numFamily+fare, rawTrainData.learn, runs = 20, k=15)#
#simulation(survived ~ sexByName+age+pclass+numFamily, rawTrainData.learn, runs = 20, k=15)#
#simulation(survived ~ sexByName+age+numFamily, rawTrainData.learn, runs = 20, k=15, kernel = "rectangular")#
#
predTest <- predict(rawTrainData.kknn, rawTestData)#
rawTestData$survived <- predTest#
write.csv(rawTestData, file="./data/NaiveRFModelKNN.csv", row.names=F)
predTest <- predict(rawTrainData.kknn, rawTestData)
rawTestData$survived <- predTest
dim(predTest)
predict(rawTrainData.kknn, rawTestData)
predTest <- predict(rawTrainData.kknn, rawTestData)
dim(predTest)
length(predTest)
load("./data/train_clean_new_sex.RData")#
load("./data/test_clean_new_sex.RData")
dim(rawTestData)
m <- dim(rawTrainData)[1]#
val <- sample(1:m, size = round(m/3), replace = FALSE, prob = rep(1/m, m))#
#
rawTrainData.learn <- rawTrainData[-val,]#
rawTrainData.valid <- rawTrainData[val,]#
#rawTrainData.kknn <- kknn(survived ~ sexByName+age+pclass+numFamily+fare, rawTrainData.learn, rawTrainData.valid , distance = 1, kernel = "triangular")#
rawTrainData.kknn <- kknn(survived ~ sexByName+age+numFamily, rawTrainData.learn, rawTrainData.valid , distance = 1, k=15, kernel = "rectangular")
predTest <- predict(rawTrainData.kknn, rawTestData)
rawTestData$survived <- predTest
m <- dim(rawTrainData)[1]#
val <- sample(1:m, size = round(m/4), replace = T, prob = rep(1/m, m))#
#
rawTrainData.learn <- rawTrainData[-val,]#
rawTrainData.valid <- rawTrainData[val,]#
#rawTrainData.kknn <- kknn(survived ~ sexByName+age+pclass+numFamily+fare, rawTrainData.learn, rawTrainData.valid , distance = 1, kernel = "triangular")#
rawTrainData.kknn <- kknn(survived ~ sexByName+age+numFamily, rawTrainData.learn, rawTrainData.valid , distance = 1, k=15, kernel = "rectangular")
fit <- fitted(rawTrainData.kknn)#
table(rawTrainData.valid$survived, fit)
simulation(survived ~ sexByName+age+numFamily, rawTrainData.learn, runs = 20, k=15, kernel = "rectangular", replace=T)
m <- dim(rawTrainData)[1]#
val <- sample(1:m, size = round(m/3), replace = F, prob = rep(1/m, m))#
#
rawTrainData.learn <- rawTrainData[-val,]#
rawTrainData.valid <- rawTrainData[val,]#
#rawTrainData.kknn <- kknn(survived ~ sexByName+age+pclass+numFamily+fare, rawTrainData.learn, rawTrainData.valid , distance = 1, kernel = "triangular")#
rawTrainData.kknn <- kknn(survived ~ sexByName+age+numFamily, rawTrainData.learn, rawTrainData.valid , distance = 1, k=15, kernel = "rectangular")
?predict
rawTrainData.kknn <- kknn(survived ~ sexByName+age+numFamily, rawTrainData, rawTrainData , distance = 1, k=15, kernel = "rectangular")
rawTrainData.kknn
fit <- fitted(rawTrainData.kknn)
fit
length(fit)
rawTrainData.kknn <- kknn(survived ~ sexByName+age+numFamily, rawTrainData, rawTestData , distance = 1, k=15, kernel = "rectangular")
fit <- fitted(rawTrainData.kknn)
length(fit)
kaggele competition #
#Rahim delaviz #
#look at https://github.com/mattdelhey/kaggle-titanic#
#setwd("/Domain/tudelft.net/Users/rdelavizaghbolagh/Coursera/DataScience/kaggle/titanic")#
#
rm(list=ls())#
setwd("/Users/rahimdelaviz/Coursera/IntroDataScience/courseMaterial/kaggle/titanic")#
#trainDataClean = read.csv("./data/train_clean.csv")#
#testDataClean  = read.csv("./data/test_clean.csv")#
#
load("./data/train_clean_new_sex.RData")#
load("./data/test_clean_new_sex.RData")#
#
library(kknn)#
# data(iris)#
# m <- dim(iris)[1]#
# val <- sample(1:m, size = round(m/3), replace = FALSE,#
# prob = rep(1/m, m))#
# iris.learn <- iris[-val,]#
# iris.valid <- iris[val,]#
# iris.kknn <- kknn(Species~., iris.learn, iris.valid, distance = 1,#
# kernel = "triangular")#
# summary(iris.kknn)#
# fit <- fitted(iris.kknn)#
# table(iris.valid$Species, fit)#
# pcol <- as.character(as.numeric(iris.valid$Species))#
# pairs(iris.valid[1:4], pch = pcol, col = c("green3", "red")#
# [(iris.valid$Species != fit)+1])#
# data(ionosphere)#
# ionosphere.learn <- ionosphere[1:200,]#
# ionosphere.valid <- ionosphere[-c(1:200),]#
# fit.kknn <- kknn(class ~ ., ionosphere.learn, ionosphere.valid)#
# table(ionosphere.valid$class, fit.kknn$fit)#
# (fit.train1 <- train.kknn(class ~ ., ionosphere.learn, kmax = 15,#
# kernel = c("triangular", "rectangular", "epanechnikov", "optimal"), distance = 1))#
# table(predict(fit.train1, ionosphere.valid), ionosphere.valid$class)#
# (fit.train2 <- train.kknn(class ~ ., ionosphere.learn, kmax = 15,#
# kernel = c("triangular", "rectangular", "epanechnikov", "optimal"), distance = 2))#
# table(predict(fit.train2, ionosphere.valid), ionosphere.valid$class)#
m <- dim(rawTrainData)[1]#
val <- sample(1:m, size = round(m/3), replace = F, prob = rep(1/m, m))#
#
rawTrainData.learn <- rawTrainData[-val,]#
rawTrainData.valid <- rawTrainData[val,]#
#rawTrainData.kknn <- kknn(survived ~ sexByName+age+pclass+numFamily+fare, rawTrainData.learn, rawTrainData.valid , distance = 1, kernel = "triangular")#
rawTrainData.kknn <- kknn(survived ~ sexByName+age+numFamily, rawTrainData, rawTestData , distance = 1, k=15, kernel = "rectangular")#
#
#predict(rawTrainData.kknn, rawTestData)#
fit <- fitted(rawTrainData.kknn)#
#table(rawTrainData.valid$survived, fit)#
#
#simulation(survived ~ sexByName+age+pclass+numFamily+fare, rawTrainData.learn, runs = 20, k=15)#
#simulation(survived ~ sexByName+age+pclass+numFamily, rawTrainData.learn, runs = 20, k=15)#
#simulation(survived ~ sexByName+age+numFamily, rawTrainData.learn, runs = 20, k=15, kernel = "rectangular", replace=T)#
#
#predTest <- predict(rawTrainData.kknn, rawTestData)#
rawTestData$survived <- fit#
write.csv(rawTestData, file="./data/NaiveRFModelKNN.csv", row.names=F)
glmModel <- glm(survived ~ sexByName+age+pclass+numFamily+fare, data=rawTrainData)
rm(list=ls())#
setwd("/Users/rahimdelaviz/Coursera/IntroDataScience/courseMaterial/kaggle/titanic")#
#trainDataClean = read.csv("./data/train_clean.csv")#
#testDataClean  = read.csv("./data/test_clean.csv")#
#
load("./data/train_clean_new_sex.RData")#
load("./data/test_clean_new_sex.RData")
glmModel <- glm(survived ~ sexByName+age+pclass+numFamily+fare, data=rawTrainData)
glmModel <- glm(survived ~ sexByName+age+pclass+numFamily+fare, data=rawTrainData, family = binomial(link = "logit"))
summary(glmModel)
glmModel <- glm(survived ~ sexByName+age+pclass+numFamily, data=rawTrainData, family = binomial(link = "logit"))
summary(glmModel)
is.na(rawTrainData$age)
coef(glmModel)
kaggele competition #
#Rahim delaviz #
#look at https://github.com/mattdelhey/kaggle-titanic#
#setwd("/Domain/tudelft.net/Users/rdelavizaghbolagh/Coursera/DataScience/kaggle/titanic")#
#
rm(list=ls())#
setwd("/Users/rahimdelaviz/Coursera/IntroDataScience/courseMaterial/kaggle/titanic")#
#trainDataClean = read.csv("./data/train_clean.csv")#
#testDataClean  = read.csv("./data/test_clean.csv")#
#
load("./data/train_clean_new_sex.RData")#
load("./data/test_clean_new_sex.RData")
exp(coef(glmModel))
coef(glmModel)
glmModel <- glm(survived ~ sexByName+age+pclass+numFamily, data=rawTrainData, family = binomial(link = "logit"))#
#
coef(glmModel)#
exp(coef(glmModel))
summary(glmModel)
predTest <- predict(glmModel, rawTestData)
predTest
predict(glmModel, rawTestData, type="response")
glmModel <- glm(survived ~ sexByName+age+pclass+numFamily, data=rawTrainData, family = binomial(link = "logit"))
predTest <- predict(glmModel, rawTestData, type="response")
predict(glmModel, rawTestData)
predict(glmModel, rawTestData, type="response")
predTest[predTest < 0.5] <- 0
predTest[predTest >0 0.5] <- 1
predTest[predTest >0.5] <- 1
predTest
class(predTest)
write.csv(rawTestData, file="./data/NaiveRFModelGLM.csv", row.names=F)
predTest <- predict(glmModel, rawTestData, type="response")#
predTest[predTest < 0.5] <- 0#
predTest[predTest >0.5] <- 1#
#
rawTestData$survived <- predTest
predTest
write.csv(rawTestData, file="./data/NaiveRFModelGLM.csv", row.names=F)
rawTestData$survived
